// Interface Definition Language (also known as Schema) grammar
schema = _{
	COMMENT* ~ MULTILINE_COMMENT*
    ~ WS?
    ~ (
    	COMMENT | import
        | settings | constant
        | validator | enumeration
        | structure | error | protocol
      )*
}

import = {
	WS ~ "import" ~ WS
    ~ domain_namespaced
}

constant =  {
	WS ~ "const" ~ WS ~ id
    ~ WS? ~ ":" ~ WS?
    ~ kind ~ (WS? ~ "=" ~ WS? ~ value)?
}

settings = {
	WS? ~ docstring*
	~ WS? ~ "settings" ~ WS? ~ id? ~ WS?
    ~ "{" ~ WS? ~ parameter* ~ WS? ~ "}"
}

enumeration = {
   	WS? ~ docstring* ~ property*
	~ "enum" ~ WS ~ id ~ WS?
    ~ "{" ~ WS? ~ enum_variant+ ~ WS? ~ "}"
    ~ WS?
}
enum_variant = {
    (index ~ "#")? ~ WS?
    // TODO: Uncomment and replace the line below when this feature will be addressed
    // ~ id ~ enum_variant_field?
    ~ id
    ~ WS?
}
enum_variant_field = {
	"("
    ~ kind
    ~ ")"
}

validator = {
   	WS? ~ docstring* ~ property*
    ~ "validator" ~ WS ~ id ~ WS?
    ~ "{" ~ WS?
    ~ field*
    ~ validator_expr_block
    ~ WS? ~ "}"
    ~ WS?
}
validator_expr_block = {
    WS? ~ "validate" ~ WS?~ "="
    ~ WS? ~ "{" ~ WS?
    ~ expression_block
    ~ WS? ~ "}" ~ WS?
}

expression = {
	(operation ~ WS? ~ boolean_operator? ~ WS?)+
}
item = {
	domain_namespaced | domain | variable
}
function_call = {
	WS? ~ item
    ~ WS? ~ "(" ~ WS?
    ~ function_call_arg*
    ~ WS? ~ ")" ~ WS?
}
function_call_arg = {
	WS? ~ ","? ~ WS?
    ~ (operation | function_call | value)
    ~ WS?
}

entity = { number | variable }
operation = {
    entity ~ WS?
    ~ (boolean_operator | operator)
	~ WS? ~ (value | entity)+
}
operator = {
	"==" | "!="
    | "<" | ">"
    | "+" | "-" | "/"
    | "|"
}
boolean_operator = {
	"or" | "and"
}

structure = {
    WS? ~ docstring?
    ~ WS? ~ property*
	~ "struct" ~ WS ~ id ~ WS?
    ~ "{" ~ WS?
    ~ (constant | field)+
    ~ WS? ~ "}"
    ~ WS?
}
field = {
	WS? ~ property*
    // ~ (index ~ "#")?
    ~ (WS? ~ requirement)?
    ~ WS? ~ id ~ WS? ~ ":" ~ WS? ~ kind
    ~ (WS? ~ "=" ~ WS? ~ value)? ~ WS?
}
index = @{ digit }
requirement = { "optional" }

error = {
    WS? ~ docstring? ~ property*
	~ "error" ~ WS ~ id ~ WS?
    ~ "{" ~ WS?
    ~ (parameter | field)+
    ~ WS? ~ "}" ~ WS?
}

protocol = {
    WS? ~ docstring? ~ property*
    ~ "protocol" ~ WS ~ id ~ WS?
    ~ "{" ~ WS? ~ function* ~ WS? ~ "}"
}
function = {
	WS? ~ docstring? ~ property*
    ~ (index ~ WS? ~ "#" ~ WS?)?
    ~ (asynchronous ~ WS?)?
    ~ (direction ~ WS?)?
    ~ "function" ~ WS ~ id ~ WS?
    ~ "(" ~ WS? ~ argument* ~ WS? ~ ")"
    ~ (WS? ~ "->" ~ WS? ~ returns+)?
    // ~ (WS? ~ ":" ~ WS? ~ parameter+)?
    ~ (WS? ~ "!" ~ WS? ~ throws)?
    ~ ";"
}
direction = { "client" | "server" }

asynchronous = { "async" }
argument = {
	","? ~ WS?
    ~ ((id ~ WS? ~ ":" ~ WS? ~ kind) | kind)
	~ WS?
}
returns = { ","? ~ WS? ~ (kind) ~ WS? }
throws = {
	function_call
}


// Common Rules
parameter = {
	WS? ~ id ~ WS? ~ "=" ~ WS? ~ value ~ WS?
}
property = {
	WS? ~ "@"
    ~ WS? ~ property_domain
    ~ WS? ~ "=" ~ WS?
    ~ property_expression ~ WS?
}
property_domain = {
	variable | domain
}
property_expression = {
	(domain_namespaced | domain
    | number | property_array)
}
property_array = {
	"[" ~ WS?
    ~ property_instance*
    ~ WS? ~ "]"
}
property_instance = {
    WS? ~ domain
    ~ "(" ~ property_attribute* ~ ")"
	~ WS?
}
property_attribute = {
	WS? ~ id ~ "=" ~ kind
}

expression_block = { function_call* }

variable = @{ (id | kind | ".")+ }
domain = @{ (id | "::")+ }
domain_namespaced = @{ (id | "::" | "_")+ }
number = @{ digit+ }
id     = @{ (alpha | "_")+ }
kind   = @{ (alpha | digit)+ }

instantiation = {
	(domain | domain_namespaced)
    ~ "(" ~ domain ~ ")"
}

docstring = {
	 "///" ~
     (docstring_property | docstring_description)
     ~ NEWLINE
}
docstring_property = {
	" "* ~ "@" ~ " "* ~ domain
    ~ " "* ~ ":"
    ~ " "? ~ docstring_description
}
docstring_description = @{
	(!NEWLINE ~ ANY)+
}

value = {
	"true" | "false" | number
    | string | string_interpolated
    | instantiation
	| variable
    | domain | domain_namespaced
}

string = {
	"\"" ~ string_inner ~ "\""
}
string_interpolated = {
	"f" ~ "\"" ~ string_interpolated_inner ~ "\""
}
string_interpolated_inner = _{
	(string_interpolation | char)*
}
string_interpolation = _{ "{" ~ domain ~ "}" }

string_inner = _{
	(string_interpolation | char)*
}
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}


alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }

WS = _{ (" " | "\t" | "\n")+ }
COMMENT = _{
	!"///" ~
	"//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE
}
MULTILINE_COMMENT = _{
	"/*"
    ~ (MULTILINE_COMMENT | !"*/" ~ ANY)*
    ~ "*/"
}
